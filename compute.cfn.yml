---
AWSTemplateFormatVersion: 2010-09-09


Description: Fargate Compute Example


Parameters:

  DeploymentId:
    Description: Deployment id
    Type: String

  EnvironmentName:
    Description: Environment name, either dev or prod
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: Specify either dev or prod

  ModelBucketName:
    Description: The bucket to pull the models from
    Type: String

  BuildAccountId:
    Description: The AWS build account id
    Type: String

  AvailabilityZone0:
    Description: The first availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone

  AvailabilityZone1:
    Description: The second availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone

  SslCertificateArn:
    Type: String
    Description: The SSL/TLS certificate ARN
    MinLength: 0
    MaxLength: 2048
    Default: ""

  SeedDockerImage:
    Type: String
    Description: Initial image before CodePipeline is executed. Existing application images in ECR should override this parameter

  ContainerCpuApi:
    Type: Number
    Description: Amount of CPU for the container - https://aws.amazon.com/fargate/pricing/
    Default: 512
    MinValue: 256
    MaxValue: 4096
    ConstraintDescription: Value must be between 256 and 4096

  ContainerMemoryApi:
    Type: Number
    Description: Amount of memory for the container - https://aws.amazon.com/fargate/pricing/
    Default: 1024
    MinValue: 512
    MaxValue: 30720
    ConstraintDescription: Value must be between 512 and 30720

  ContainerCpuWorker:
    Type: Number
    Description: Amount of CPU for the container - https://aws.amazon.com/fargate/pricing/
    Default: 256
    MinValue: 256
    MaxValue: 4096
    ConstraintDescription: Value must be between 256 and 4096

  ContainerMemoryWorker:
    Type: Number
    Description: Amount of memory for the container - https://aws.amazon.com/fargate/pricing/
    Default: 512
    MinValue: 512
    MaxValue: 30720
    ConstraintDescription: Value must be between 512 and 30720

  DatabaseName:
    Default: compute
    Type: String
    Description: Database name
    MinLength: 5
    MaxLength: 30
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Name must begin with a letter and contain only alphanumeric characters

  DatabaseUser:
    Default: root
    Type: String
    Description: Database admin account name
    MinLength: 4
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Name must begin with a letter and contain only alphanumeric characters

  DatabasePassword:
    NoEcho: true
    Type: String
    Description: Database admin account password
    MinLength: 6
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Password must contain only alphanumeric characters

  DatabaseSize:
    Default: 100
    Type: Number
    Description: Database storage size in gigabytes (GB)
    MinValue: 5
    ConstraintDescription: Enter a size of at least 5 GB

  DatabaseInstanceClass:
    Default: db.t3.medium
    Type: String
    Description: Database instance class
    ConstraintDescription: DB instance class not supported

  NeptuneInstanceClass:
    Default: db.r4.large
    Type: String
    Description: Neptune instance class
    ConstraintDescription: Neptune instance class not supported

  AlbIngressPort:
    Description: The ALB ingress port used by security groups
    Type: Number
    MinValue: 0
    MaxValue: 65535
    ConstraintDescription: TCP ports must be between 0 - 65535
    Default: 80

  AppIngressPort:
    Description: The application ingress port used by security groups
    Type: Number
    MinValue: 0
    MaxValue: 65535
    ConstraintDescription: TCP ports must be between 0 - 65535
    Default: 8080

  AppProtocol:
    Type: String
    Description: The application server protocol
    Default: HTTP
    AllowedValues:
      - HTTP
      - HTTPS
    ConstraintDescription: Specify either HTTTP or HTTPS

  # Scaling params
  WorkerServiceScaleEvaluationPeriods:
    Description: The number of periods over which data is compared to the specified threshold
    Type: Number
    Default: 2
    MinValue: 2

  WorkerServiceQueueDepthScaleOutThreshold:
    Type: Number
    Description: Average queue depth value to trigger auto scaling out
    Default: 20

  WorkerServiceQueueDepthScaleInThreshold:
    Type: Number
    Description: Average queue depth value to trigger auto scaling in
    Default: 25
    MinValue: 0
    ConstraintDescription: Value must be between 0 or more

  WorkerTaskMinContainerCount:
    Type: Number
    Description: Minimum number of containers to run for the service
    Default: 1
    MinValue: 0

  WorkerTaskMaxContainerCount:
    Type: Number
    Description: Maximum number of containers to run for the service when auto scaling out
    Default: 5
    MinValue: 1
    ConstraintDescription: Value must be at least one

  JobQueueVisibilityTimeout:
    Type: Number
    Description: The SQS visibility timeout
    MinValue: 0
    MaxValue: 43200
    Default: 7200 # Two hour default

  JobCompletedQueueVisibilityTimeout:
    Type: Number
    Description: The SQS visibility timeout
    MinValue: 0
    MaxValue: 43200
    Default: 500


Mappings:

  # Maps CIDR blocks to VPC and various subnets
  CidrMap:
    Vpc:
      Cidr: 10.50.0.0/16
    Public0:
      Cidr: 10.50.0.0/24
    Public1:
      Cidr: 10.50.1.0/24
    Private0:
      Cidr: 10.50.64.0/19
    Private1:
      Cidr: 10.50.96.0/19


Conditions:

  TlsCertPasssed: !Not [ !Equals [ !Ref SslCertificateArn, "" ] ]

  IsProd: !Equals [ !Ref EnvironmentName, prod ]


Resources:

  CodePipelineApiReleaseBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${DeploymentId}-${EnvironmentName}-${AWS::StackName}-api
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: DeploymentId
          Value: !Ref DeploymentId
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Type
          Value: Api

  CodePipelineApiReleaseBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineApiReleaseBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${CodePipelineApiReleaseBucket}/*
              Principal:
                AWS:  arn:aws:iam::${BuildAccountId}:root

  CodePipelineWorkerReleaseBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${DeploymentId}-${EnvironmentName}-${AWS::StackName}-worker
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: DeploymentId
          Value: !Ref DeploymentId
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Type
          Value: Api

  CodePipelineWorkerReleaseBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineWorkerReleaseBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${CodePipelineWorkerReleaseBucket}/*
              Principal:
                AWS:  arn:aws:iam::${BuildAccountId}:root

  CodePipelineWorkerArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: DeploymentId
          Value: !Ref DeploymentId
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Type
          Value: Worker

  CodePipelineApiArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: DeploymentId
          Value: !Ref DeploymentId
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Type
          Value: Api

  CodePipelineWorkerArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: DeploymentId
          Value: !Ref DeploymentId
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Type
          Value: Worker

  LogGroup#CodePipeBuildApi:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /app/${AWS::StackName}/build-api

  LogGroupBuildWorker:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /app/${AWS::StackName}/build-worker

  EcrDockerRepositoryApi:
    Type: AWS::ECR::Repository

  EcrDockerRepositoryWorker:
    Type: AWS::ECR::Repository

  CodeBuildProjectApi:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub
          - |
            ---
            version: 0.2
            phases:
              install:
                commands:
                  - apt-get update && apt-get -y install python-pip && pip install --upgrade python && pip install --upgrade awscli jq
              pre_build:
                  commands:
                  - $(aws ecr get-login --no-include-email --registry-ids $BUILD_ACCOUNT_ID)
                  - IMAGE_URI=$(cat images.json | jq '.[0].imageUri' | tr -d \")
                  - TAG="$(date +%Y-%m-%d.%H.%M.%S)"
                  - docker pull $IMAGE_URI
                  - $(aws ecr get-login --no-include-email)
                  - docker tag $IMAGE_URI $REPOSITORY_URI:$TAG
              post_build:
                commands:
                  - docker push $REPOSITORY_URI:$TAG
                  - printf '[{"name":"${ServiceName}","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > images.json
            artifacts:
              files: images.json
          - ServiceName: !Sub ${AWS::StackName}-api
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildDockerImage
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepositoryApi}
          - Name: ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: BUILD_ACCOUNT_ID
            Value: !Ref BuildAccountId
          - Name: DEPLOYMENT_ID
            Value: !Ref DeploymentId
      Name: !Sub ${AWS::StackName}-api
      ServiceRole: !Ref CodeBuildServiceRole
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref LogGroupBuildApi
      Tags:
        - Key: DeploymentId
          Value: !Ref DeploymentId
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Type
          Value: Api

  CodeBuildProjectWorker:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub
          - |
            ---
            version: 0.2
            phases:
              install:
                commands:
                  - apt-get update && apt-get -y install python-pip && pip install --upgrade python && pip install --upgrade awscli jq
              pre_build:
                  commands:
                  - $(aws ecr get-login --no-include-email --registry-ids $BUILD_ACCOUNT_ID)
                  - IMAGE_URI=$(cat images.json | jq '.[0].imageUri' | tr -d \")
                  - TAG="$(date +%Y-%m-%d.%H.%M.%S)"
                  - docker pull $IMAGE_URI
                  - $(aws ecr get-login --no-include-email)
                  - docker tag $IMAGE_URI $REPOSITORY_URI:$TAG
              post_build:
                commands:
                  - docker push $REPOSITORY_URI:$TAG
                  - printf '[{"name":"${ServiceName}","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > images.json
            artifacts:
              files: images.json
          - ServiceName: !Sub ${AWS::StackName}-api
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildDockerImage
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepositoryWorker}
          - Name: ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: BUILD_ACCOUNT_ID
            Value: !Ref BuildAccountId
          - Name: DEPLOYMENT_ID
            Value: !Ref DeploymentId
      Name: !Sub ${AWS::StackName}-worker
      ServiceRole: !Ref CodeBuildServiceRole
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref LogGroupBuildWorker
      Tags:
        - Key: DeploymentId
          Value: !Ref DeploymentId
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Type
          Value: Worker

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${CodePipelineApiArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:s3:::${CodePipelineWorkerArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrDockerRepositoryApi}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrDockerRepositoryWorker}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${BuildAccountId}:repository/${DeploymentId}-${EnvironmentName}-${AWS::StackName}-api
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${BuildAccountId}:repository/${DeploymentId}-${EnvironmentName}-${AWS::StackName}-worker
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability

  CodePipelineWorker:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceWorkerRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineWorkerArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                S3Bucket: !Ref CodePipelineWorkerReleaseBucket
                S3ObjectKey: images.json
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectWorker
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref FargateCluster
                ServiceName: !Sub ${AWS::StackName}-worker
                FileName: images.json
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
    DependsOn:
      - CodePipelineWorkerArtifactBucketPolicy
      - CodeBuildProjectWorker
      - CodePipelineServiceWorkerRole

  CodePipelineApi:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceApiRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineApiArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                S3Bucket: !Ref CodePipelineApiReleaseBucket
                S3ObjectKey: images.json
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectApi
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref FargateCluster
                ServiceName: !Sub ${AWS::StackName}-api
                FileName: images.json
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
    DependsOn:
      - CodePipelineApiArtifactBucketPolicy
      - CodeBuildProjectApi
      - CodePipelineServiceApiRole

  CodePipelineServiceWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:List*
                  - ecs:Describe*
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource: !Sub arn:aws:s3:::${CodePipelineWorkerArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${BuildAccountId}:repository/${DeploymentId}-${EnvironmentName}-${AWS::StackName}-worker
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability

  CodePipelineServiceApiRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:List*
                  - ecs:Describe*
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource: !Sub arn:aws:s3:::${CodePipelineApiArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${BuildAccountId}:repository/${DeploymentId}-${EnvironmentName}-${AWS::StackName}-api
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability



  JobQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${DeploymentId}-${EnvironmentName}-${AWS::StackName}-job-queue
      VisibilityTimeout: !Ref JobQueueVisibilityTimeout
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  JobCompletedQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${DeploymentId}-${EnvironmentName}-${AWS::StackName}-job-completed-queue
      VisibilityTimeout: !Ref JobCompletedQueueVisibilityTimeout
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  QueueShareStatsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref BuildAccountId
            Action:
              - sqs:GetQueueAttributes
      Queues:
        - !Ref JobQueue
        - !Ref JobCompletedQueue

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ CidrMap, Vpc, Cidr ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: DeploymentId
        Value: !Ref DeploymentId

  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ CidrMap, Public0, Cidr ]
      AvailabilityZone: !Ref AvailabilityZone0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicSubnet0
      - Key: Environment
        Value: !Ref EnvironmentName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ CidrMap, Public1, Cidr ]
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ CidrMap, Private0, Cidr ]
      AvailabilityZone: !Ref AvailabilityZone0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet0
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ CidrMap, Private1, Cidr ]
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-route
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  PrivateRouteTableSubnet0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-route-0
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  PrivateRouteTableSubnet1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-route-1
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociation0:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      NetworkAclId: !GetAtt Vpc.DefaultNetworkAcl

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !GetAtt Vpc.DefaultNetworkAcl

  DataBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DataTempBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  LogGroupApi:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /app/${AWS::StackName}/compute-api

  LogGroupWorker:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /app/${AWS::StackName}/compute-worker

  TaskRoleApi:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: sqs-job-queue-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt JobQueue.Arn
        - PolicyName: sqs-job-completed-queue-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource: !GetAtt JobCompletedQueue.Arn
        - PolicyName: neptune
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: neptune-db:*
                Resource: !Sub arn:aws:neptune-db:us-east-1:${AWS::AccountId}:${NeptuneCluster.ClusterResourceId}/*
        - PolicyName: get-secret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                Condition:
                  ForAnyValue:StringLike:
                    secretsmanager:VersionStage: AWSCURRENT
                Resource: !Ref DatabasePasswordSecret

  TaskRoleWorker:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: sqs-job-completed-queue-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt JobCompletedQueue.Arn
        - PolicyName: sqs-job-queue-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt JobQueue.Arn
        - PolicyName: data-s3-bucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: !GetAtt DataBucket.Arn
        - PolicyName: neptune
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: neptune-db:*
                Resource: !Sub arn:aws:neptune-db:us-east-1:${AWS::AccountId}:${NeptuneCluster.ClusterResourceId}/*
        - PolicyName: get-secret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                Condition:
                  ForAnyValue:StringLike:
                    secretsmanager:VersionStage: AWSCURRENT
                Resource: !Ref DatabasePasswordSecret

  FargateTaskDefinitionApi:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCpuApi
      Memory: !Ref ContainerMemoryApi
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt TaskRoleApi.Arn
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}-api
          Image: !Ref SeedDockerImage
          ReadonlyRootFilesystem: true
          PortMappings:
            - ContainerPort: !Ref AppIngressPort
          Environment:
            - Name: DATA_BUCKET
              Value: !Ref DataBucket
            - Name: DATA_TEMP_BUCKET
              Value: !Ref DataTempBucket
            - Name: MODEL_BUCKET
              Value: !Ref ModelBucketName
            - Name: DB_ENDPOINT
              Value: !GetAtt Database.Endpoint.Address
            - Name: DB_PORT
              Value: !GetAtt Database.Endpoint.Port
            - Name: DB_USER
              Value: !Ref DatabaseUser
            - Name: DB_PASSWORD_SECRET_NAME
              Value: !Sub ${AWS::StackName}-DatabasePassword
            - Name: GRAPH_DB_ENDPOINT
              Value: !GetAtt NeptuneCluster.Endpoint
            - Name: GRAPH_DB_READ_ENDPOINT
              Value: !GetAtt NeptuneCluster.ReadEndpoint
            - Name: GRAPH_DB_PORT
              Value: !GetAtt NeptuneCluster.Port
            - Name: GRAPH_DB_RESOURCE_NAME
              Value: !Ref NeptuneCluster
            - Name: GRAPH_DB_RESOURCE_ID
              Value: !GetAtt NeptuneCluster.ClusterResourceId
            - Name: SQS_JOB_QUEUE_URL
              Value: !Ref JobQueue
            - Name: SQS_JOB_COMPLETED_QUEUE_URL
              Value: !Ref JobCompletedQueue
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: STACK_NAME
              Value: !Ref AWS::StackName
            - Name: DEPLOYMENT_ID
              Value: !Ref DeploymentId
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroupApi
              awslogs-stream-prefix: api

  FargateTaskDefinitionWorker:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-worker
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCpuWorker
      Memory: !Ref ContainerMemoryWorker
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt TaskRoleWorker.Arn
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}-worker
          Image: !Ref SeedDockerImage
          ReadonlyRootFilesystem: true
          Environment:
            - Name: DATA_BUCKET
              Value: !Ref DataBucket
            - Name: DATA_TEMP_BUCKET
              Value: !Ref DataTempBucket
            - Name: MODEL_BUCKET
              Value: !Ref ModelBucketName
            - Name: DB_ENDPOINT
              Value: !GetAtt Database.Endpoint.Address
            - Name: DB_PORT
              Value: !GetAtt Database.Endpoint.Port
            - Name: DB_USER
              Value: !Ref DatabaseUser
            - Name: DB_PASSWORD_SECRET_NAME
              Value: !Sub ${AWS::StackName}-DatabasePassword
            - Name: GRAPH_DB_ENDPOINT
              Value: !GetAtt NeptuneCluster.Endpoint
            - Name: GRAPH_DB_READ_ENDPOINT
              Value: !GetAtt NeptuneCluster.ReadEndpoint
            - Name: GRAPH_DB_PORT
              Value: !GetAtt NeptuneCluster.Port
            - Name: GRAPH_DB_RESOURCE_NAME
              Value: !Ref NeptuneCluster
            - Name: GRAPH_DB_RESOURCE_ID
              Value: !GetAtt NeptuneCluster.ClusterResourceId
            - Name: SQS_JOB_QUEUE_URL
              Value: !Ref JobQueue
            - Name: SQS_JOB_COMPLETED_QUEUE_URL
              Value: !Ref JobCompletedQueue
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: STACK_NAME
              Value: !Ref AWS::StackName
            - Name: DEPLOYMENT_ID
              Value: !Ref DeploymentId
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroupWorker
              awslogs-stream-prefix: worker

  SecretsManagerVpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Secrets Manager Vpc Endpoint security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref AppSecurityGroup
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SecretsManagerVpcEndpointSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  CloudWatchLogsVpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: CloudWatch Logs Vpc Endpoint security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref AppSecurityGroup
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-CloudWatchLogsVpcEndpointSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  SqsVpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SQS Vpc Endpoint security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref AppSecurityGroup
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SqsVpcEndpointSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  SqsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sqs
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !GetAtt SqsVpcEndpointSecurityGroup.GroupId

  SecretsManagerVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !GetAtt SecretsManagerVpcEndpointSecurityGroup.GroupId

  CloudWatchLogsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !GetAtt CloudWatchLogsVpcEndpointSecurityGroup.GroupId

  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::prod-${AWS::Region}-starport-layer-bucket/*
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:*
            Resource:
              - !Sub arn:aws:s3:::${DataBucket}/*
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub arn:aws:s3:::${ModelBucketName}/*
      RouteTableIds:
        - !Ref PrivateRouteTableSubnet0
        - !Ref PrivateRouteTableSubnet1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref Vpc

  EcrVpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECR Vpc Endpoint security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref AppSecurityGroup
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EcrVpcEndpointSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  EcrDkrVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !GetAtt EcrVpcEndpointSecurityGroup.GroupId

  EcrApiVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !GetAtt EcrVpcEndpointSecurityGroup.GroupId

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  FargateServiceApi:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref FargateCluster
      ServiceName: !Sub ${AWS::StackName}-api
      DesiredCount: 2
      LaunchType: FARGATE
      TaskDefinition: !Ref FargateTaskDefinitionApi
      LoadBalancers:
        - ContainerName: !Sub ${AWS::StackName}-api
          ContainerPort: !Ref AppIngressPort
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref AppSecurityGroup
          Subnets:
            - !Ref PrivateSubnet0
            - !Ref PrivateSubnet1
    DependsOn:
      - FargateCluster
      - FargateTaskDefinitionApi
      - LoadBalancerListener

  FargateServiceWorker:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref FargateCluster
      ServiceName: !Sub ${AWS::StackName}-worker
      DesiredCount: !Ref WorkerTaskMinContainerCount
      LaunchType: FARGATE
      TaskDefinition: !Ref FargateTaskDefinitionWorker
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref AppSecurityGroup
          Subnets:
            - !Ref PrivateSubnet0
            - !Ref PrivateSubnet1
    DependsOn:
      - FargateCluster
      - FargateTaskDefinitionWorker

  ServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: '*'

  WorkerServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref WorkerTaskMinContainerCount
      MaxCapacity: !Ref WorkerTaskMaxContainerCount
      ResourceId: !Sub
        - service/${EcsClusterName}/${EcsWorkerServiceName}
        - EcsClusterName: !Ref FargateCluster
          EcsWorkerServiceName: !Sub ${AWS::StackName}-worker # There is a bug in the GetAtt Service.Name call
      RoleARN: !GetAtt ServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn:
      - FargateServiceWorker

  WorkerServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref WorkerServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: 1
            MetricIntervalLowerBound: 0
    DependsOn: WorkerServiceScalingTarget

  WorkerServiceScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref WorkerServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: -1
            MetricIntervalUpperBound: 0
    DependsOn: WorkerServiceScalingTarget

  WorkerServiceScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: !Ref WorkerServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref WorkerServiceQueueDepthScaleOutThreshold
      AlarmDescription: Alarm to add capacity if queue depth is high
      Period: 60
      AlarmActions:
        - !Ref WorkerServiceScaleOutPolicy
      Namespace:  AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: !GetAtt JobQueue.QueueName
      ComparisonOperator: GreaterThanThreshold
      MetricName: ApproximateNumberOfMessagesVisible
    DependsOn:
      - FargateServiceWorker
      - WorkerServiceScaleOutPolicy

  WorkerServiceScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: !Ref WorkerServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref WorkerServiceQueueDepthScaleInThreshold
      AlarmDescription: Alarm to reduce capacity if container queue depth is low
      Period: 300
      AlarmActions:
        - !Ref WorkerServiceScaleInPolicy
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: !GetAtt JobQueue.QueueName
      ComparisonOperator: LessThanThreshold
      MetricName: ApproximateNumberOfMessagesVisible
    DependsOn:
      - FargateServiceWorker
      - WorkerServiceScaleInPolicy

  DatabasePasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Ref DatabasePassword
      Name: !Sub ${AWS::StackName}-DatabasePassword

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the DB
      VpcId: !Ref Vpc
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 5432
        FromPort: 5432
      SecurityGroupIngress:
        SourceSecurityGroupId: !Ref AppSecurityGroup
        IpProtocol: tcp
        ToPort: 5432
        FromPort: 5432
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DbSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  NeptuneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Neptune
      VpcId: !Ref Vpc
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 8182
        FromPort: 8182
      SecurityGroupIngress:
        SourceSecurityGroupId: !Ref AppSecurityGroup
        IpProtocol: tcp
        ToPort: 8182
        FromPort: 8182
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NeptuneSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref AlbSecurityGroup
        IpProtocol: tcp
        ToPort: !Ref AppIngressPort
        FromPort: !Ref AppIngressPort
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AppSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  AppSecurityGroupFromAlbIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AppSecurityGroup
      IpProtocol: tcp
      ToPort: !Ref AppIngressPort
      FromPort: !Ref AppIngressPort
      SourceSecurityGroupId: !Ref AlbSecurityGroup

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/HTTPs ingress
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: !Ref AlbIngressPort
        FromPort: !Ref AlbIngressPort
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AlbSecurityGroup
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  AlbSecurityGroupToAppEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: tcp
      ToPort: !Ref AppIngressPort
      FromPort: !Ref AppIngressPort
      DestinationSecurityGroupId: !Ref AppSecurityGroup

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Database subnet group
      SubnetIds:
      - !Ref PrivateSubnet0
      - !Ref PrivateSubnet1
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups:
        - !Ref DbSecurityGroup
      Engine: postgres
      EngineVersion: 10.6
      DBName: !Ref DatabaseName
      MasterUsername: !Ref DatabaseUser
      MasterUserPassword: !Ref DatabasePassword
      DBInstanceClass: !Ref DatabaseInstanceClass
      AllocatedStorage: !Ref DatabaseSize
      StorageType: gp2
      MultiAZ: !If [ IsProd, true, false ]
      StorageEncrypted: true
      CopyTagsToSnapshot: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId
    DeletionPolicy: Snapshot
    DependsOn: DatabaseSubnetGroup

  NeptuneSubnetGroup:
    Type: AWS::Neptune::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Neptune subnet group
      SubnetIds:
      - !Ref PrivateSubnet0
      - !Ref PrivateSubnet1
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  NeptuneCluster:
    Type: AWS::Neptune::DBCluster
    Properties:
      DBSubnetGroupName: !Ref NeptuneSubnetGroup
      IamAuthEnabled: true
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref NeptuneSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  NeptuneInstance0:
    Type: AWS::Neptune::DBInstance
    Properties:
      DBClusterIdentifier: !Ref NeptuneCluster
      DBInstanceClass: !Ref NeptuneInstanceClass
      DBSubnetGroupName: !Ref NeptuneSubnetGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  NeptuneInstance1:
    Type: AWS::Neptune::DBInstance
    Condition: IsProd
    Properties:
      DBClusterIdentifier: !Ref NeptuneCluster
      DBInstanceClass: !Ref NeptuneInstanceClass
      DBSubnetGroupName: !Ref NeptuneSubnetGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref Vpc
      Port: !Ref AppIngressPort
      Protocol: !Ref AppProtocol
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: !Ref AppProtocol
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 300
      TargetType: ip
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId
    DependsOn: ApplicationLoadBalancer

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: DeploymentId
          Value: !Ref DeploymentId

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: !Ref AlbIngressPort
      Protocol: !Ref AppProtocol
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
    DependsOn:
    - TargetGroup
    - ApplicationLoadBalancer

  NatEip0:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VpcGatewayAttachment

  NatEip1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VpcGatewayAttachment

  NatGateway0:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip0.AllocationId
      SubnetId: !Ref PublicSubnet0
    DependsOn: VpcGatewayAttachment

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip1.AllocationId
      SubnetId: !Ref PublicSubnet1
    DependsOn: VpcGatewayAttachment

  NatRoute0:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableSubnet0
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway0

  NatRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableSubnet1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  SubnetRouteTableAssociationNatGateway0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTableSubnet0

  SubnetRouteTableAssociationNatGateway1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTableSubnet1


Outputs:

  Name:
    Description: Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  DeploymentId:
    Description: Deployment Id
    Value: !Ref DeploymentId
    Export:
      Name: !Sub ${AWS::StackName}-DeploymentId

  DatabaseSubnetGroupName:
    Description: Db subnet group name
    Value: !Ref DatabaseSubnetGroup
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetGroupName

  FargateClusterName:
    Value: !Ref FargateCluster
    Export:
      Name: !Sub ${AWS::StackName}-FargateClusterName

  FargateClusterArn:
    Value: !GetAtt FargateCluster.Arn
    Export:
      Name: !Sub ${AWS::StackName}-FargateClusterArn

  FargateServiceApiArn:
    Value: !Ref FargateServiceApi
    Export:
      Name: !Sub ${AWS::StackName}-FargateServiceApiArn

  FargateServiceApiName:
    Value: !GetAtt FargateServiceApi.Name
    Export:
      Name: !Sub ${AWS::StackName}-FargateServiceApiName

  FargateServiceWorkerArn:
    Value: !Ref FargateServiceWorker
    Export:
      Name: !Sub ${AWS::StackName}-FargateServiceWorkerArn

  # There is a CFN bug if you have multiple services in the same template, the
  # name attribute is not correct, so we are manually setting it.
  FargateServiceWorkerName:
    Value: !Sub ${AWS::StackName}-worker
    Export:
      Name: !Sub ${AWS::StackName}-FargateServiceWorkerName

  DataBucketName:
    Value: !Ref DataBucket
    Export:
      Name: !Sub ${AWS::StackName}-DataBucket

  DataBucketArn:
    Value: !GetAtt DataBucket.Arn
    Export:
      Name: !Sub ${AWS::StackName}-DataBucketArn

  DataTempBucketName:
    Value: !Ref DataTempBucket
    Export:
      Name: !Sub ${AWS::StackName}-DataTempBucket

  DataTempBucketArn:
    Value: !GetAtt DataTempBucket.Arn
    Export:
      Name: !Sub ${AWS::StackName}-DataTempBucketArn

  DatabaseName:
    Value: !Ref Database
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseName

  DatabaseEndpoint:
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseEndpoint

  DatabasePort:
    Value: !GetAtt Database.Endpoint.Port
    Export:
      Name: !Sub ${AWS::StackName}-DatabasePort

  DatabasePasswordSecretArn:
    Value: !Ref DatabasePasswordSecret
    Export:
      Name: !Sub ${AWS::StackName}-DatabasePasswordSecretArn

  DatabasePasswordSecretName:
    Value: !Sub ${AWS::StackName}-DatabasePassword
    Export:
      Name: !Sub ${AWS::StackName}-DatabasePasswordSecretName

  ApplicationLoadBalancerArn:
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerArn

  ApplicationLoadBalancerDnsName:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerDnsName

  NeptuneClusterName:
    Value: !Ref NeptuneCluster
    Export:
      Name: !Sub ${AWS::StackName}-NeptuneClusterName

  NeptuneClusterEndpoint:
    Value: !GetAtt NeptuneCluster.Endpoint
    Export:
      Name: !Sub ${AWS::StackName}-NeptuneClusterEndpoint

  NeptuneClusterReadEndpoint:
    Value: !GetAtt NeptuneCluster.ReadEndpoint
    Export:
      Name: !Sub ${AWS::StackName}-NeptuneClusterReadEndpoint

  NeptuneClusterPort:
    Value: !GetAtt NeptuneCluster.Port
    Export:
      Name: !Sub ${AWS::StackName}-NeptuneClusterPort

  NeptuneClusterResourceId:
    Value: !GetAtt NeptuneCluster.ClusterResourceId
    Export:
      Name: !Sub ${AWS::StackName}-NeptuneClusterResourceId

